# serverless.yml
service: points-service

provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    POINTS_MANIFEST_TABLE: ${self:service}-${self:provider.stage}-pointsManifestTable
    INFO_TABLE: ${self:service}-${self:provider.stage}-infoTable
    CACHE_BUCKET: ${self:service}-${self:provider.stage}-cache-bucket

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.POINTS_MANIFEST_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.INFO_TABLE}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:provider.environment.CACHE_BUCKET}/*"

functions:
  uploadPointsData:
    handler: source/main.uploadPointsData
    events:
      - http:
          path: uploadPointsData/{date}/divisionName/{divisionName}/type/{type}
          method: post
          cors: true
  downloadPointsData:
    handler: source/main.downloadPointsData
    events:
      - http:
          path: downloadPointsData/{key}
          method: get
          cors: true
  getManifest:
    handler: source/main.getManifest
    events:
      - http:
          path: getManifest
          method: get
          cors: true

resources:
  Resources:
    pointsManifestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.POINTS_MANIFEST_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
    infoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.INFO_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
    cacheBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:provider.environment.CACHE_BUCKET}
